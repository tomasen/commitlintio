(function(e){function t(t){for(var n,a,r=t[0],c=t[1],l=t[2],p=0,d=[];p<r.length;p++)a=r[p],Object.prototype.hasOwnProperty.call(i,a)&&i[a]&&d.push(i[a][0]),i[a]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(e[n]=c[n]);m&&m(t);while(d.length)d.shift()();return s.push.apply(s,l||[]),o()}function o(){for(var e,t=0;t<s.length;t++){for(var o=s[t],n=!0,r=1;r<o.length;r++){var c=o[r];0!==i[c]&&(n=!1)}n&&(s.splice(t--,1),e=a(a.s=o[0]))}return e}var n={},i={app:0},s=[];function a(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,a),o.l=!0,o.exports}a.m=e,a.c=n,a.d=function(e,t,o){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},a.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(a.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(o,n,function(t){return e[t]}.bind(null,n));return o},a.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/";var r=window["webpackJsonp"]=window["webpackJsonp"]||[],c=r.push.bind(r);r.push=t,r=r.slice();for(var l=0;l<r.length;l++)t(r[l]);var m=c;s.push([0,"chunk-vendors"]),o()})({0:function(e,t,o){e.exports=o("56d7")},"034f":function(e,t,o){"use strict";o("85ec")},"0b5c":function(e,t,o){"use strict";o("cc32")},1:function(e,t){},2:function(e,t){},3:function(e,t){},4:function(e,t){},"56d7":function(e,t,o){"use strict";o.r(t);o("e260"),o("e6cf"),o("cca6"),o("a79d");var n=o("2b0e"),i=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{attrs:{id:"app"}},[o("Home")],1)},s=[],a=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("b-container",{attrs:{fluid:""}},[o("b-navbar",{staticClass:"navbar",attrs:{variant:"faded"}},[o("b-navbar-brand",{staticClass:"title"},[e._v(" COMMIT"),o("span",{staticClass:"lighter"},[e._v("LINT")])]),o("b-navbar-nav",{staticClass:"d-none d-sm-block"},[o("b-nav-text",[o("span",{staticClass:"slogan"},[e._v(" lint commit messages online ")])])],1),o("b-navbar-nav",{staticClass:"rules ml-auto"},[o("b-nav-item-dropdown",{attrs:{text:e.activeRule()+" ",right:""}},[o("b-dropdown-item",{attrs:{href:"#Angular"}},[e._v("Angular")]),o("b-dropdown-item",{attrs:{href:"#Conventional"}},[e._v("Conventional")]),o("b-dropdown-item",{attrs:{href:"#Patternplate"}},[e._v("Patternplate")])],1)],1)],1),o("b-row",{staticClass:"mainContainer"},[o("b-col",[o("Linter",{attrs:{ruleName:this.rule}})],1)],1),o("b-row",[o("b-col",{staticClass:"text-left"},[o("b-container",{staticClass:"footer",domProps:{innerHTML:e._s(e.compiledMarkdown)}})],1)],1),o("b-row",{attrs:{"align-h":"center"}},[o("b-col",{attrs:{cols:"4"}},[e._v(" © 2009-2022 "),o("b-link",{attrs:{href:"https://tomasen.org"}},[e._v("SHENG SHEN")]),e._v(". ")],1),o("b-col",{attrs:{cols:"4"}},[o("b-link",{attrs:{href:"https://github.com/tomasen/commitlintio"}},[e._v("Github")]),e._v(" | "),o("b-link",{attrs:{href:"https://twitter.com/ShooterPlayer"}},[e._v("Twitter")]),e._v(" | "),o("b-link",{attrs:{href:"https://story.tomasen.org/"}},[e._v("Medium")])],1)],1)],1)},r=[],c=o("3835"),l=(o("4fad"),o("7c5c")),m=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("b-container",{staticClass:"linterContainer"},[o("b-row",[o("b-col",[o("b-form-select",{directives:[{name:"b-popover",rawName:"v-b-popover.hover.bottom",value:e.tipType,expression:"tipType",modifiers:{hover:!0,bottom:!0}}],attrs:{options:e.allowedType,placeholder:"type"},model:{value:e.commitType,callback:function(t){e.commitType=t},expression:"commitType"}},[o("template",{slot:"first"},[o("option",{attrs:{disabled:""},domProps:{value:""}},[e._v("<type>")])])],2)],1),o("b-col",{attrs:{cols:"9"}},[o("b-form-input",{directives:[{name:"b-popover",rawName:"v-b-popover.hover.bottom",value:e.tipScope,expression:"tipScope",modifiers:{hover:!0,bottom:!0}}],attrs:{placeholder:"<scope>"},model:{value:e.commitScope,callback:function(t){e.commitScope=t},expression:"commitScope"}})],1)],1),o("b-row",[o("b-col",[o("b-form-input",{directives:[{name:"b-popover",rawName:"v-b-popover.hover.bottom",value:e.tipSubject,expression:"tipSubject",modifiers:{hover:!0,bottom:!0}}],attrs:{type:"text",placeholder:"<subject> succinct description of the change"},model:{value:e.commitMessage,callback:function(t){e.commitMessage=t},expression:"commitMessage"}})],1)],1),o("b-row",[o("b-col",[o("b-form-textarea",{directives:[{name:"b-popover",rawName:"v-b-popover.hover.bottom",value:e.tipBody,expression:"tipBody",modifiers:{hover:!0,bottom:!0}}],attrs:{placeholder:"body (optional)",rows:3,"max-rows":6},model:{value:e.commitMessageBody,callback:function(t){e.commitMessageBody=t},expression:"commitMessageBody"}})],1)],1),o("b-row",[o("b-col",[o("b-form-textarea",{directives:[{name:"b-popover",rawName:"v-b-popover.hover.bottom",value:e.tipFooter,expression:"tipFooter",modifiers:{hover:!0,bottom:!0}}],attrs:{placeholder:"footer (optional)",rows:1,"max-rows":6},model:{value:e.commitMessageFooter,callback:function(t){e.commitMessageFooter=t},expression:"commitMessageFooter"}})],1)],1),o("b-row",{class:e.isValidCommitMessage?"d-none":""},[o("b-col",[o("b-alert",{attrs:{variant:"warning",show:!e.isValidCommitMessage},domProps:{innerHTML:e._s(e.lintResults)}})],1)],1),o("b-row",{class:e.combinedMessage&&e.isValidCommitMessage?"":"d-none"},[o("b-col",[o("b-card",{attrs:{title:"Commit Message:"}},[o("p",{staticClass:"card-text",domProps:{innerHTML:e._s(e.markedCombinedMessage)}}),o("b-button",{attrs:{variant:"primary",disabled:!e.isValidCommitMessage},on:{click:e.copyToClipboard}},[e._v(" Copy to Clipboard ")]),o("b-alert",{attrs:{show:e.dismissCountDown,dismissible:"",variant:e.clipboardSuccess?"success":"warning"},on:{dismissed:function(t){e.dismissCountDown=0},"dismiss-count-down":e.countDownChanged}},[o("p",[e._v(e._s(e.clipboardMessage))])])],1)],1)],1)],1)},p=[],d=(o("d3b7"),o("159b"),o("99af"),o("b0c0"),o("4189")),u=o.n(d),h=o("8d2a"),f=o.n(h),b={name:"Linter",props:["ruleName"],data:function(){return{commitType:"",commitScope:"",commitMessage:"",commitMessageBody:"",commitMessageFooter:"",isValidCommitMessage:!0,clipboardSuccess:!0,dismissCountDown:0,clipboardMessage:"",tipScope:"could be anything specifying place of the commit change. For example $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView, etc...",tipSubject:'- use imperative, present tense: "change" not “changed” nor “changes”\n  - don\'t capitalize first letter\n  - no dot (.) at the end',tipType:"must be one of the options",tipBody:"- use imperative, present tense: “change” not “changed” nor “changes”\n- includes motivation for the change and contrasts with previous behavior",tipFooter:'- contain any information about breaking changes with the description of the change, justification and migration notes\n- reference GitHub issues that this commit Closes. such as closed bugs should be listed in the footer prefixed with "Closes" keyword like: "Closes #234, #241"'}},created:function(){},computed:{allowedType:function(){var e={feat:"feature",fix:"bug fix",docs:"documentation",style:"formatting, missing semi colons, etc.",refactor:"neither fixes a bug or adds a feature",test:"adding missing tests",chore:"maintain",build:"build system or external dependencies changes",ci:"CI configurations and scripts changes",perf:"improves performance",revert:"reverts a previous commit"},t=[],o=f.a[this.ruleName],n=o.rules["type-enum"][2];return n.forEach((function(o,n){t[n]={value:o,text:"".concat(o,"(").concat(e[o],")")}})),t},combinedMessage:function(){var e=this.commitType;return this.commitScope&&(e+="(".concat(this.commitScope,")")),e&&(e+=": "),e+=this.commitMessage,this.commitMessageBody&&(e+="\n\n".concat(this.commitMessageBody)),this.commitMessageFooter&&(e+="\n\n".concat(this.commitMessageFooter)),e},markedCombinedMessage:function(){return Object(l["marked"])(this.combinedMessage,{sanitize:!0})}},asyncComputed:{lintResults:function(){var e=this;return new Promise((function(t){if(!e.combinedMessage)return e.isValidCommitMessage=!1,void t("empty commit message");var o=f.a[e.ruleName];u()(e.combinedMessage,o.rules,o.parserPreset).then((function(o){if(o.valid)return e.isValidCommitMessage=!0,void t("");e.isValidCommitMessage=!1;var n="";o.errors.forEach((function(e){n+="".concat(e.name,":").concat(e.message," (level: ").concat(e.level," valid: ").concat(e.valid,") <br/>")})),t(n)}))}))}},methods:{countDownChanged:function(e){this.dismissCountDown=e},copyToClipboard:function(){var e=this;this.$copyText(this.combinedMessage).then((function(){e.dismissCountDown=3,e.clipboardSuccess=!0,e.clipboardMessage="Copied to Clipboard Successed"}),(function(t){e.dismissCountDown=5,e.clipboardSuccess=!1,e.clipboardMessage="Copied to Clipboard Failed ".concat(t)}))}}},g=b,v=(o("f84f"),o("2877")),y=Object(v["a"])(g,m,p,!1,null,"2c594be9",null),w=y.exports,C="\n### About\n\nCommitlint.io helps your project to ensure nice and tidy commit messages\nwithout needing any downloads or installations. \nIt's designed with your workflow in mind by using zero change to your system.\n\n### Usage\n\nMore readable messages that are easy to follow when looking through the project history. \nJust fill in the <type> <scope> and <subject> of your commit. \nAnd it will show if your commit message complies with the guideline.\n\nOnce the commit message passes the linter, you can click the \"Copy to Clipboard\" button to copy it to the clipboard and paste it to your git client.\n\n### Goal\n\n- provide better information when browsing the history\n- allow generating CHANGELOG.md by script\n- allow ignoring commits by git bisect (not important commits\n  like formatting)\n\n### FAQ\n\n- #### Which git commit convention that Commitlint.io support?\n\n  Right now, we provide the convention preset that follow\n  [AngularJS Git Commit Message Conventions](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit), [conventional commits](https://conventionalcommits.org/), and [patternplate commit convention](https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-patternplate). \n  In the future, we will provide choices of more rules and set custom rules.\n\n### Sponsor\n\n- [Uplinks.Net - VPN that don't require Installation to Connect](https://uplinks.net)\n\n### Thanks\n\n- [commitlint](https://github.com/marionebl/commitlint)\n- [commitizen](https://github.com/commitizen/cz-cli)\n\n----\n",x={name:"Home",data:function(){return{rule:""}},components:{Linter:w},methods:{activeRule:function(){for(var e=0,t=Object.entries(f.a);e<t.length;e++){var o=Object(c["a"])(t[e],1),n=o[0];if("#"+n==this.$route.hash)return this.rule=n,n}return this.rule="Angular","Rules"}},computed:{compiledMarkdown:function(){return Object(l["marked"])(C,{sanitize:!0})}}},j=x,M=(o("0b5c"),Object(v["a"])(j,a,r,!1,null,"0e84983a",null)),k=M.exports,_={name:"App",components:{Home:k}},S=_,P=(o("034f"),Object(v["a"])(S,i,s,!1,null,null,null)),T=P.exports,A=o("4a7a"),O=o.n(A),N=o("8c4f"),I=o("5f5b"),B=o("4eb5"),E=o.n(B),H=o("3003"),F=o("59fb"),G=(o("f9e3"),o("2dd8"),new N["a"]({mode:"history"}));n["default"].use(I["a"]),n["default"].use(E.a),n["default"].use(N["a"]),n["default"].use(H["a"]),n["default"].component("v-select",O.a),n["default"].directive("Nav",F["a"]),n["default"].config.productionTip=!1,new n["default"]({router:G,render:function(e){return e(T)}}).$mount("#app")},"85ec":function(e,t,o){},"8d2a":function(e,t){t.AngularTypeEnum={extends:["@commitlint/config-angular-type-enum"],formatter:"/home/runner/work/commitlintio/commitlintio/node_modules/@commitlint/format/lib/index.js",parserPreset:void 0,ignores:void 0,defaultIgnores:void 0,plugins:{},rules:{"type-enum":[2,"always",["build","ci","docs","feat","fix","perf","refactor","revert","style","test"]]},helpUrl:"https://github.com/conventional-changelog/commitlint/#what-is-commitlint",prompt:{}},t.Angular={extends:["@commitlint/config-angular"],formatter:"/home/runner/work/commitlintio/commitlintio/node_modules/@commitlint/format/lib/index.js",parserPreset:{parserOpts:{headerPattern:/^(\w*)(?:\((.*)\))?!?: (.*)$/}},ignores:void 0,defaultIgnores:void 0,plugins:{},rules:{"subject-exclamation-mark":[2,"never"],"body-leading-blank":[1,"always"],"footer-leading-blank":[1,"always"],"header-max-length":[2,"always",72],"scope-case":[2,"always","lower-case"],"subject-case":[2,"never",["sentence-case","start-case","pascal-case","upper-case"]],"subject-empty":[2,"never"],"subject-full-stop":[2,"never","."],"type-case":[2,"always","lower-case"],"type-empty":[2,"never"],"type-enum":[2,"always",["build","ci","docs","feat","fix","perf","refactor","revert","style","test"]]},helpUrl:"https://github.com/conventional-changelog/commitlint/#what-is-commitlint",prompt:{}},t.Conventional={extends:["@commitlint/config-conventional"],formatter:"/home/runner/work/commitlintio/commitlintio/node_modules/@commitlint/format/lib/index.js",parserPreset:{name:"conventional-changelog-conventionalcommits",path:"./node_modules/conventional-changelog-conventionalcommits/index.js",parserOpts:{headerPattern:/^(\w*)(?:\((.*)\))?!?: (.*)$/,breakingHeaderPattern:/^(\w*)(?:\((.*)\))?!: (.*)$/,headerCorrespondence:["type","scope","subject"],noteKeywords:["BREAKING CHANGE","BREAKING-CHANGE"],revertPattern:/^(?:Revert|revert:)\s"?([\s\S]+?)"?\s*This reverts commit (\w*)\./i,revertCorrespondence:["header","hash"],issuePrefixes:["#"]}},ignores:void 0,defaultIgnores:void 0,plugins:{},rules:{"body-leading-blank":[1,"always"],"body-max-line-length":[2,"always",100],"footer-leading-blank":[1,"always"],"footer-max-line-length":[2,"always",100],"header-max-length":[2,"always",100],"subject-case":[2,"never",["sentence-case","start-case","pascal-case","upper-case"]],"subject-empty":[2,"never"],"subject-full-stop":[2,"never","."],"type-case":[2,"always","lower-case"],"type-empty":[2,"never"],"type-enum":[2,"always",["build","chore","ci","docs","feat","fix","perf","refactor","revert","style","test"]]},helpUrl:"https://github.com/conventional-changelog/commitlint/#what-is-commitlint",prompt:{questions:{type:{description:"Select the type of change that you're committing",enum:{feat:{description:"A new feature",title:"Features",emoji:"✨"},fix:{description:"A bug fix",title:"Bug Fixes",emoji:"🐛"},docs:{description:"Documentation only changes",title:"Documentation",emoji:"📚"},style:{description:"Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)",title:"Styles",emoji:"💎"},refactor:{description:"A code change that neither fixes a bug nor adds a feature",title:"Code Refactoring",emoji:"📦"},perf:{description:"A code change that improves performance",title:"Performance Improvements",emoji:"🚀"},test:{description:"Adding missing tests or correcting existing tests",title:"Tests",emoji:"🚨"},build:{description:"Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)",title:"Builds",emoji:"🛠"},ci:{description:"Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)",title:"Continuous Integrations",emoji:"⚙️"},chore:{description:"Other changes that don't modify src or test files",title:"Chores",emoji:"♻️"},revert:{description:"Reverts a previous commit",title:"Reverts",emoji:"🗑"}}},scope:{description:"What is the scope of this change (e.g. component or file name)"},subject:{description:"Write a short, imperative tense description of the change"},body:{description:"Provide a longer description of the change"},isBreaking:{description:"Are there any breaking changes?"},breakingBody:{description:"A BREAKING CHANGE commit requires a body. Please enter a longer description of the commit itself"},breaking:{description:"Describe the breaking changes"},isIssueAffected:{description:"Does this change affect any open issues?"},issuesBody:{description:"If issues are closed, the commit requires a body. Please enter a longer description of the commit itself"},issues:{description:'Add issue references (e.g. "fix #123", "re #123".)'}}}},t.LernaScopes={extends:["@commitlint/config-lerna-scopes"],formatter:"/home/runner/work/commitlintio/commitlintio/node_modules/@commitlint/format/lib/index.js",parserPreset:void 0,ignores:void 0,defaultIgnores:void 0,plugins:{},rules:{"scope-enum":[2,"always",[]]},helpUrl:"https://github.com/conventional-changelog/commitlint/#what-is-commitlint",prompt:{}},t.Patternplate={extends:["@commitlint/config-patternplate"],formatter:"/home/runner/work/commitlintio/commitlintio/node_modules/@commitlint/format/lib/index.js",parserPreset:{parserOpts:{headerPattern:/^(\w*)(?:\((.*)\))?!?: (.*)$/}},ignores:void 0,defaultIgnores:void 0,plugins:{},rules:{"subject-exclamation-mark":[2,"never"],"body-leading-blank":[1,"always"],"footer-leading-blank":[1,"always"],"header-max-length":[2,"always",72],"scope-case":[2,"always","lower-case"],"subject-case":[2,"never",["sentence-case","start-case","pascal-case","upper-case"]],"subject-empty":[2,"never"],"subject-full-stop":[2,"never","."],"type-case":[2,"always","lower-case"],"type-empty":[2,"never"],"type-enum":[2,"always",["build","ci","docs","feat","fix","perf","refactor","revert","style","test"]],"scope-enum":[2,"always",["system"]]},helpUrl:"https://github.com/conventional-changelog/commitlint/#what-is-commitlint",prompt:{}}},a3a8:function(e,t,o){},cc32:function(e,t,o){},f84f:function(e,t,o){"use strict";o("a3a8")}});
//# sourceMappingURL=app.0b9f25ec.js.map